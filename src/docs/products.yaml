tags:
  - name: Product
    description: Operations related to products

paths:
# DOCS FOR GETTING ALL THE PRODUCTS
  /api/products:
    get:
      summary: Get all product from store excluding expired products
      tags:
        - Product
      responses:
        200:
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  ok:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Product"
                  message:
                    type: string
                    example: "Available products retrieved successfully"
        500:
          description: "Internal Server Error"

  # DOCS FOR GETTING A SPECIFIC PRODUCT
  /api/products/{productId}:
    get:
      summary: get a specific product by ID
      tags:
        - Product
      parameters:
        - in: path
          name: productId
          required: true
          type: string
      responses:
        200:
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  ok:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Product"
                  message:
                    type: string
                    example: "product retrieved successfully"
        404:
          description: product not found
        500:
          description: "Internal Server Error"

  # DOCS FOR DELETING A PRODUCT BY ID
  /api/products/{id}:
    delete:
      summary: delete a specified product
      security:
        - bearerAuth: []
      tags:
        - Product
      description: Delete a product from the store
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        200:
          description: Products deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  ok:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Product"
                  message:
                    type: string
                    example: "product deleted successfully"
        403:
          description: unauthorized
        404:
          description: product not found
        500:
          description: "Internal Server Error"
  /api/{categoryId}/products:
    post:
      summary: Create a new product
      security:
        - bearerAuth: []
      tags:
        - Product
      description: Create a new product in the store
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
          description: ID of the category to which the product belongs
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name *:
                  type: string
                  description: Name of the product to which the product belongs
                sellerId *:
                  type: string
                  description: Name of the seller to which the product belongs to
                description *:
                  type: string
                  description: Description to which the product
                price *:
                  type: number
                  description: Price of the product
                quantity:
                  type: number
                  description: Quantity of the product(by default it's 1)
                expiryDate:
                  type: string
                  format: date
                  description: For products that might end
                images *:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Array of product images (minimum 4 images required)
      responses:
        201:
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 201
                  ok:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Product"
                  message:
                    type: string
                    example: Thank you for adding a new product in the store!
        400:
          description: Bad request, invalid parameters provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  ok:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Product should have at least 4 images
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                  ok:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Something went wrong when creating the product

/api/products/{sizeId}/available:
  put:
    security:
     - bearerAuth: []
    summary: Mark a product as available in stock
    tags:
        - Product
    description: |
      This endpoint marks a product for a given sizeId as available.
    parameters:
      - name: sizeId
        in: path
        description: ID of the size to mark
        required: true
        type: string
    responses:
      200:
        description: Product marked as available successfully
        schema: 
          type: object
          properties:
            ok:
              type: boolean
              example: true
            message:
              type: string
              example: This product is successfully marked as available
      403:
        description: Message response when the product cannot be marked as available
        schema:
          type: object
          properties: 
            ok: 
              type: boolean
              example: false
            message:
              type: string
              example: Check this product in stock for its quantity and expiration date
      404:
        description: Message when the size or product is not found
        schema:
          type: object
          properties:
            ok:
              type: boolean
              example: false
            message: 
              type: string
              example: This size is not available
      500:
        description: Internal server error

/api/products/{sizeId}/unavailable:
  put:
    security:
      - bearerAuth: []
    summary: Mark a product as unavailable in stock
    tags:
        - Product
    description: |
      This endpoint marks a product for a given sizeId as unavailable when there is low stock or expired date is up.
    parameters:
      - name: sizeId
        in: path
        description: ID of the size to mark
        required: true
        type: string
    responses:
      200:
        description: Product marked as unavailable in stock successfully
        schema: 
          type: object
          properties:
            ok:
              type: boolean
              example: true
            message:
              type: string
              example: This product is successfully marked as unavailable
      403:
        description: Message response when the product cannot be marked as unavailable
        schema:
          type: object
          properties: 
            ok: 
              type: boolean
              example: false
            message:
              type: string
              example: This Product already exist in stock with valid expiration date
      404:
        description: Message when the size or product is not found
        schema:
          type: object
          properties:
            ok:
              type: boolean
              example: false
            message: 
              type: string
              example: This size is not available
      500:
        description: Internal server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      type: object
      properties:
        name:
          type: string
          description: Name of the product
        description:
          type: string
          description: Description of the product
        price:
          type: number
          format: float
          description: Price of the product
        categoryId:
          type: string
          description: ID of the category to which the product belongs
        images:
          type: array
          items:
            type: string
          description: Array of URLs of product images
